#
# 'make depend' uses makedepend to automatically generate dependencies
#               (dependencies are added to end of Makefile)
# 'make'        build executable file 'hack_client'
# 'make clean'  removes all .o and executable files
#
IGNORE := $(shell bash -c "source ~/.zshrc; env | sed 's/=/:=/' | sed 's/^/export /' > makeenv")                         
include makeenv
#include $XHOME/.env/loadenv
#include $XHOME/.env/env_hackrf

export PREFIX=$XHOME/.local
#source $XHOME/.env/env_hackrf
echo PREFIX = ${PREFIX}
echo PATH = ${PATH}
echo "CC = ${CC}"

# define the C compiler to use
CC = $PREFIX/bin/gcc
CPP = $PREFIX/bin/cpp
CXX = $PREFIX/bin/c++

SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
PATH=/Users/ed/.local/bin:/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/Users/ed/Library/Python/3.8/bin

CPATH=$PREFIX/include:/opt/local/include
CPPFLAGS=-I$PREFIX/include -I/opt/local/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include
LDFLAGS=-L$PREFIX/lib/ -L/opt/local/lib/ -L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib/

export warnflags=-Wno-error=implicit-function-declaration


# define any compile-time flags
CFLAGS = -Wall -g -D_DARWIN_C_SOURCE

# define any directories containing header files other than /usr/include
#
INCLUDES = -I../../include -I$PREFIX/include -I/opt/local/include -I/usr/local/include

# define library paths in addition to /usr/lib
# LFLAGS = -L../../../lib -L/usr/local/lib
LFLAGS = -L$PREFIX/lib/ -L/opt/local/lib/ -L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib/

# define any libraries to link into executable:
#   if I want to link in libraries (libx.so or libx.a) I use the -llibname
#   option, something like (this will link in libmylib.so and libm.so:
LIBS = -lusb-1.0 -lfftw3f

# define the C source files
#SRCS = comm/client.c lib/utils.c lib/hackrf/hackrf_sweep.c lib/hackrf/hackrf.c
SRCS = lib/utils.c lib/hackrf/hackrf_sweep.c lib/hackrf/hackrf.c

# define the C object files
#
# This uses Suffix Replacement within a macro:
#   $(name:string1=string2)
#         For each word in 'name' replace 'string1' with 'string2'
# Below we are replacing the suffix .c of all words in the macro SRCS
# with the .o suffix
#
OBJS = $(SRCS:.c=.o)

# define the executable file
MAIN = hackrf_client

#
# The following part of the makefile is generic; it can be used to
# build any executable just by changing the definitions above and by
# deleting dependencies appended to the file from 'make depend'
#

.PHONY: depend clean

all:    $(MAIN)
	@echo  hackrf_client has been compiled

$(MAIN): $(OBJS)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDES) -o $(MAIN) $(OBJS) $(LFLAGS) $(LIBS)

# this is a suffix replacement rule for building .o's from .c's
# it uses automatic variables $<: the name of the prerequisite of
# the rule(a .c file) and $@: the name of the target of the rule (a .o file)
# (see the gnu make manual section about automatic variables)
.c.o:
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDES) -c $<  -o $@

clean:
	$(RM) *.o */*.o *~ $(MAIN)

depend: $(SRCS)
	makedepend $(INCLUDES) $^

# DO NOT DELETE THIS LINE -- make depend needs it
